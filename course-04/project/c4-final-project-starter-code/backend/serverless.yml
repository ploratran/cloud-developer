service:
  name: serverless-todo-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function # define iam role for each particular functions
  - serverless-plugin-tracing
  - serverless-aws-documentation # use for document info of app
  - serverless-reqvalidator-plugin # validate request body
  - serverless-plugin-canary-deployments 

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-2'}

  tracing: 
    lambda: true
    apiGateway: true

  # Dynamodb Tables: 
  environment: 
    TODOS_TABLE: Todos-${self:provider.stage}
    TODOS_S3_BUCKET: ploratran-todos-images-ab4ff-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
    INDEX_TABLE: IndexTable-${self:provider.stage}

custom: 
  documentation: 
    api: 
      info: 
        version: v1.0.0
        title: Todos API
        description: Serverless exercise for todos list
    # JSON Schema to validate HTTP request using serverless-reqvalidator-plugin
    models: 
      - name: CreateRequest
        contentType: application/json
        schema: ${file(model-validators/create-todo-request.json)}
      - name: UpdateRequest
        contentType: application/json
        schema: ${file(model-validators/update-todo-request.json)}

functions:

  RS256Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  # TODO: Configure this function
  GetTodos:
    handler: src/lambda/http/getTodos.handler
    iamRoleStatements:
      - Effect: Allow # permission to Query table
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Effect: "Allow" # xray permissions (required) 
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"
    events:
      - http:
          method: get
          path: todos
          cors: true
          authorizer: RS256Auth
          reqValidatorName: RequestBodyValidator

  # TODO: Configure this function
  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem # allow to insert new item into table
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Effect: "Allow" # xray permissions
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"
    events:
      - http:
          method: post
          path: todos
          cors: true
          authorizer: RS256Auth
          reqValidatorName: RequestBodyValidator
          documentation: 
            summary: Create a new todo
            description: Create a new todo
            requestModels: 
              'application/json': CreateRequest

  # TODO: Configure this function
  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    iamRoleStatements:
      - Effect: "Allow" # xray permissions 
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"
    events:
      - http:
          method: patch
          path: todos/{todoId}
          cors: true
          authorizer: RS256Auth
          reqValidatorName: RequestBodyValidator
          documentation: 
            summary: Update a new todo
            description: Update a new todo
            requestModels: 
              'application/json': UpdateRequest

  # TODO: Configure this function
  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    iamRoleStatements:
      - Effect: "Allow" # xray permissions (required) 
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"
    events:
      - http:
          method: delete
          path: todos/{todoId}

  # TODO: Configure this function
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: todos/{todoId}/attachment
          cors: true
          authorizer: RS256Auth

resources:
  Resources:
    # TODO: Add any necessary AWS resources
    # 1) Validate Request Body: 
    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties: 
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    # 2) Response from 400+ error: 
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    # 3) Configure S3 Bucket Attachment and Policy: 
    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.TODOS_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000
    
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: '2012-10-17'
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.TODOS_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket
    
    # 4) Todos DymamoDB Table: 
    TodosDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId # partition key
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
          - AttributeName: todoId # sort key
            AttributeType: S
        KeySchema:
          # 1:M (One user -> Many todos)
          - AttributeName: userId # partition key
            KeyType: HASH
          - AttributeName: todoId # sort key
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST # edge region
        TableName: ${self:provider.environment.TODOS_TABLE}
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.INDEX_TABLE}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL # What attributes will be copied to an index