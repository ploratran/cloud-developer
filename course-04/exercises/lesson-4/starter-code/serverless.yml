service:
  name: serverless-udagram-app

plugins:
  - serverless-webpack
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-2'}

  environment:
    GROUPS_TABLE: Groups-${self:provider.stage}
    IMAGES_TABLE: Images-${self:provider.stage}
    IMAGE_ID_INDEX: ImageIdIndex
    CONNECTIONS_TABLE: Connections-${self:provider.stage} # DynamoDB for Websocket user by connectionID
    IMAGES_S3_BUCKET: serverless-udagram-images-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300 # expired time of S3 signed URL
    THUMBNAILS_S3_BUCKET: serverless-udagram-thumbnail-${self:provider.stage}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:PutItem
        - dynamodb:GetItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.GROUPS_TABLE}
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IMAGES_TABLE}
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IMAGES_TABLE}/index/${self:provider.environment.IMAGE_ID_INDEX}
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
      Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*
    - Effect: Allow
      Action:
        - s3:PutObject
      Resource: "arn:aws:s3:::${self:provider.environment.THUMBNAILS_S3_BUCKET}/*"
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:PutItem
        - dynamodb:DeleteItem
      Resource: arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.CONNECTIONS_TABLE}

custom:
  topicName: imagesTopic-${self:provider.stage}
  documentation:
    api:
      info:
        version: v1.0.0
        title: Udagram API
        description: Serverless application for images sharing
    models:
      - name: GroupRequest
        contentType: application/json
        schema: ${file(models/create-group-request.json)}
      - name: ImageRequest
        contentType: application/json
        schema: ${file(models/create-image-request.json)}

functions:
  GetGroups:
    handler: src/lambda/http/getGroups.handler
    events:
      - http:
          method: get
          path: groups
          cors: true

  CreateGroup:
    handler: src/lambda/http/createGroup.handler
    events:
      - http:
          method: post
          path: groups
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new group
            description: Create a new group
            requestModels:
              'application/json': GroupRequest

  GetImages:
    handler: src/lambda/http/getImages.handler
    events:
      - http:
          method: get
          path: groups/{groupId}/images
          cors: true

  CreateImage:
    handler: src/lambda/http/createImage.handler
    events:
      - http:
          method: post
          path: groups/{groupId}/images
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new image
            description: Create a new image
            requestModels:
              'application/json': ImageRequest

  SendUploadNotifications:
    environment:
      # anything in this environment will available to this function handler
      STAGE: ${self:provider.stage}
      API_ID:
        Ref: WebsocketsApi
    handler: src/lambda/s3/sendNotifications.handler
    events:
      # define SNS topic: 
      - sns:
          arn:
            # define ARN of an SNS topic we are subscribing to: 
            Fn::Join: # combined everything using Cloudformation JOIN function 
              - ':'
              - - arn:aws:sns # prefix of sns started
                - Ref: AWS::Region # name of region sns created
                - Ref: AWS::AccountId # number of account topic created 
                - ${self:custom.topicName}
          topicName: ${self:custom.topicName} # name of sns topic

  # Lambda function to resize image via SNS topic: 
  ResizeImage:
    handler: src/lambda/s3/resizeImage.handler
    events:
      # define SNS topic: 
      - sns:
          arn: # define ARN of an SNS topic we are subscribing to: 
            Fn::Join: # combined everything using Cloudformation JOIN function 
              - ':'
              - - arn:aws:sns # prefix of sns started
                - Ref: AWS::Region # name of region sns created
                - Ref: AWS::AccountId # number of account topic created 
                - ${self:custom.topicName}
          topicName: ${self:custom.topicName} # name of sns topic


  # react to Websocket events using Serverless Framework: 
  ConnectHandler:
    handler: src/lambda/websocket/connect.handler
    events:
      - websocket:
          # event sent by Lambda function when user connect to Websocket
          route: $connect 
  DisconnectHandler:
    handler: src/lambda/websocket/disconnect.handler
    events:
      - websocket:
          # event sent when user disconnect to Websocket
          route: $disconnect

  # Uncomment if you want to enable Elasticsearch sync
  SyncWithElasticsearch:
    # environment only available to this handler
    # name of ElasticSearch domain from ImagesSearch in resources
    # use to connect to Elastic function, copy items from DynamoDB
    environment:
      ES_ENDPOINT: !GetAtt ImagesSearch.DomainEndpoint
    handler: src/lambda/dynamoDb/elasticSearchSync.handler
    events:
      # specify event is a dynamodb stream: 
      - stream:
          type: dynamodb
          # specify ARN of dynamodb stream: 
          # get attribute from DynamoDB Stream with resource ImagesDynamoDBTable: 
          arn: !GetAtt ImagesDynamoDBTable.StreamArn

resources:
  Resources:
    GroupsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.GROUPS_TABLE}

    ImagesDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: groupId
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: S
          - AttributeName: imageId
            AttributeType: S
        KeySchema:
          - AttributeName: groupId
            KeyType: HASH # partition key
          - AttributeName: timestamp
            KeyType: RANGE # sort key
        BillingMode: PAY_PER_REQUEST
        # specify DynamoDB stream: 
        StreamSpecification:
          # type of stream: NEW_IMAGE
          # only a new version in the stream: 
          StreamViewType: NEW_IMAGE
        TableName: ${self:provider.environment.IMAGES_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.IMAGE_ID_INDEX}
            KeySchema:
            - AttributeName: imageId
              KeyType: HASH # partition key
            Projection:
              ProjectionType: ALL

    WebSocketConnectionsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.CONNECTIONS_TABLE}

    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    # Cloudformation resource use S3: 
    AttachmentsBucket:
      Type: AWS::S3::Bucket
      DependsOn: SNSTopicPolicy
      Properties:
        # linked to S3 bucket: 
        BucketName: ${self:provider.environment.IMAGES_S3_BUCKET}
        NotificationConfiguration:
          # specify to connect S3 bucket events to Lambda function
          # LambdaConfigurations: 
          TopicConfigurations:
            - Event: s3:ObjectCreated:Put
              Topic: !Ref ImagesTopic # send all events to topic name ImagesTopic
        CorsConfiguration: # define CORS configuration: 
          CorsRules:
            -
              AllowedOrigins: # allow all Origins
                - '*'
              AllowedHeaders: # allow all Headers
                - '*'
              AllowedMethods: # allow all Methods
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject' # allow anybody to get object from S3
              Resource: 'arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*'
        # Ref is a function in CloudFormation that allows to get an id of a resource:
        Bucket: !Ref AttachmentsBucket # point S3 bucket defined in Cloudformation template

    # defie SNS topic policy to allow S3 to send events to this topic: 
    SNSTopicPolicy:
      Type: AWS::SNS::TopicPolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                AWS: "*"
              Action: sns:Publish # allow to call Publish action from S3 event
              Resource:
                !Ref ImagesTopic
              Condition:
                ArnLike:
                  # use ARN to define only S3 bucket to allow Publish
                  AWS:SourceArn: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}
        Topics:
          - !Ref ImagesTopic

    ThumbnailsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.THUMBNAILS_S3_BUCKET}

    ImagesTopic: # define SNS topic name
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: Image bucket topic # human-readable topic name
        TopicName: ${self:custom.topicName} # topic name from "custom" section

    # create ElasticSearch cluster: 
    ImagesSearch:
      Type: AWS::Elasticsearch::Domain
      Properties:
        ElasticsearchVersion: '6.3'
        DomainName: images-search-${self:provider.stage}
        ElasticsearchClusterConfig:
          DedicatedMasterEnabled: false # no master host
          InstanceCount: '1'
          ZoneAwarenessEnabled: false
          InstanceType: t2.small.elasticsearch # instance type
        # define Elastic Block Store:
        # define storage for cluster nodes: 
        EBSOptions:
          EBSEnabled: true
          Iops: 0
          VolumeSize: 10
          VolumeType: 'gp2'
        # define Access policy for ElasticSearch cluster: 
        AccessPolicies:
          Version: '2012-10-17'
          Statement:
            -
              Effect: Allow
              Principal:
                AWS: '*'
              Action: 'es:*'
              Resource: '*'
